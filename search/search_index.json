{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Hardening Community PowerShell Module \u00b6 Overview \u00b6 This is a community project that provides a powerful command-line interface for many security-related configurations, providing complete basic protection. Module Build Status \u00b6 Branch AzurePipelines CI Code Coverage stable unstable Supported Backends \u00b6 Microsoft Intune - Cloud-based enterprise mobility management tool Powershell DSC - Configuration management tool that extends the existing functionality of Windows PowerShell. Powershell - Task automation and configuration management framework. Ansible - Open-source software configuration management tool. Puppet - Open-source software configuration management tool. Documentation \u00b6 Full documentation for the module is located at https://hardening.netboot.fr Installation \u00b6 To install the module from PowerShell Gallery, use the PowerShell Cmdlet: Install-Module -Name HardeningCore For more detailed instructions on installing Hardening PowerShell , please refer to the installation guide installation guide . Cmdlets \u00b6 A list of Cmdlets in the Hardening PowerShell module can be found by running the following PowerShell commands: Import-Module -Name HardeningCore Get-Command -Module HardeningCore Help on individual Cmdlets can be found in the built-in Cmdlet help: Get-Help -Name Get-HCoreAccountPolicy The details of the cmdlets contained in this module can also be found in the Cmdlet section in the documentation. Contributing \u00b6 This project exists thanks to all the people who contribute. Development of Hardening happens at GitHub . You're highly encouraged to participate in the development of Hardning powershell module. If you don't like GitHub (for some reason) you're welcome to send regular patches. Be sure to also read the Contributing section in the documentation. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Getting Started"},{"location":"#the-hardening-community-powershell-module","text":"","title":"The Hardening Community PowerShell Module"},{"location":"#overview","text":"This is a community project that provides a powerful command-line interface for many security-related configurations, providing complete basic protection.","title":"Overview"},{"location":"#module-build-status","text":"Branch AzurePipelines CI Code Coverage stable unstable","title":"Module Build Status"},{"location":"#supported-backends","text":"Microsoft Intune - Cloud-based enterprise mobility management tool Powershell DSC - Configuration management tool that extends the existing functionality of Windows PowerShell. Powershell - Task automation and configuration management framework. Ansible - Open-source software configuration management tool. Puppet - Open-source software configuration management tool.","title":"Supported Backends"},{"location":"#documentation","text":"Full documentation for the module is located at https://hardening.netboot.fr","title":"Documentation"},{"location":"#installation","text":"To install the module from PowerShell Gallery, use the PowerShell Cmdlet: Install-Module -Name HardeningCore For more detailed instructions on installing Hardening PowerShell , please refer to the installation guide installation guide .","title":"Installation"},{"location":"#cmdlets","text":"A list of Cmdlets in the Hardening PowerShell module can be found by running the following PowerShell commands: Import-Module -Name HardeningCore Get-Command -Module HardeningCore Help on individual Cmdlets can be found in the built-in Cmdlet help: Get-Help -Name Get-HCoreAccountPolicy The details of the cmdlets contained in this module can also be found in the Cmdlet section in the documentation.","title":"Cmdlets"},{"location":"#contributing","text":"This project exists thanks to all the people who contribute. Development of Hardening happens at GitHub . You're highly encouraged to participate in the development of Hardning powershell module. If you don't like GitHub (for some reason) you're welcome to send regular patches. Be sure to also read the Contributing section in the documentation. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Contributing"},{"location":"configuration/ansible/overview/","text":"","title":"Overview"},{"location":"configuration/microsoft-intune/overview/","text":"","title":"Overview"},{"location":"configuration/powershell/overview/","text":"","title":"Overview"},{"location":"configuration/powershell-dsc/overview/","text":"","title":"Overview"},{"location":"configuration/puppet/overview/","text":"","title":"Overview"},{"location":"user/code-of-conduct/","text":"","title":"Code of Conduct"},{"location":"user/contributing/","text":"","title":"Contributing"},{"location":"user/faq/","text":"Frequently asked questions \u00b6 This section will eventually contain a list of questions that have been received and answered by the Project Team.","title":"FAQ"},{"location":"user/faq/#frequently-asked-questions","text":"This section will eventually contain a list of questions that have been received and answered by the Project Team.","title":"Frequently asked questions"},{"location":"user/getting-started/","text":"","title":"Getting Started"},{"location":"user/install/","text":"Install \u00b6 This repository contains a folder named HardeningCore . The folder needs to be installed into one of your PowerShell Module Paths using one of the installation methods outlined in the next section. To see the full list of available PowerShell Module paths, use $Env:PSModulePath.Split( ';' ) in a PowerShell terminal window. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $Env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\ Option 1: PowerShell Gallery Installation (Recommended) \u00b6 Ensure you have the Windows Management Framework 5.0 or greater installed. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass . Run Install-Module -Name 'HardeningCore' -Scope 'CurrentUser' to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository. Option 2: PowerShell Gallery Download \u00b6 Ensure you have the Windows Management Framework 5.0 or greater installed. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass . Run Save-Module -Name 'HardeningCore' -Path <path> to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository. Copy the contents of the HardeningCore module folder onto your workstation into the desired PowerShell Module path. Option 3: Manual Installation \u00b6 Download the latest release version to your workstation. Copy the contents of the HardeningCore folder onto your workstation into the desired PowerShell Module path. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass . Verification \u00b6 PowerShell will create a folder for each new version of any module you install. It's a good idea to check and see what version(s) you have installed and running in the session. To begin, let's see what versions of the HardeningCore Module are installed: Get-Module -ListAvailable -Name 'HardeningCore' The -ListAvailable switch will pull up all installed versions from any path found in $Env:PSModulePath . Check to make sure the version you wanted is installed. You can safely remove old versions, if desired. To see which version is currently loaded, use: Get-Module -Name 'HardeningCore' If nothing is returned, you need to first load the module by using: Import-Module -Name 'HardeningCore' If you wish to load a specific version, use: Import-Module -Name 'HardeningCore' -RequiredVersion $version Where $version is set to the desired version number.","title":"Install Guide"},{"location":"user/install/#install","text":"This repository contains a folder named HardeningCore . The folder needs to be installed into one of your PowerShell Module Paths using one of the installation methods outlined in the next section. To see the full list of available PowerShell Module paths, use $Env:PSModulePath.Split( ';' ) in a PowerShell terminal window. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $Env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\","title":"Install"},{"location":"user/install/#option-1-powershell-gallery-installation-recommended","text":"Ensure you have the Windows Management Framework 5.0 or greater installed. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass . Run Install-Module -Name 'HardeningCore' -Scope 'CurrentUser' to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository.","title":"Option 1: PowerShell Gallery Installation (Recommended)"},{"location":"user/install/#option-2-powershell-gallery-download","text":"Ensure you have the Windows Management Framework 5.0 or greater installed. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass . Run Save-Module -Name 'HardeningCore' -Path <path> to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository. Copy the contents of the HardeningCore module folder onto your workstation into the desired PowerShell Module path.","title":"Option 2: PowerShell Gallery Download"},{"location":"user/install/#option-3-manual-installation","text":"Download the latest release version to your workstation. Copy the contents of the HardeningCore folder onto your workstation into the desired PowerShell Module path. Open a PowerShell console with the Run as Administrator option. Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass .","title":"Option 3: Manual Installation"},{"location":"user/install/#verification","text":"PowerShell will create a folder for each new version of any module you install. It's a good idea to check and see what version(s) you have installed and running in the session. To begin, let's see what versions of the HardeningCore Module are installed: Get-Module -ListAvailable -Name 'HardeningCore' The -ListAvailable switch will pull up all installed versions from any path found in $Env:PSModulePath . Check to make sure the version you wanted is installed. You can safely remove old versions, if desired. To see which version is currently loaded, use: Get-Module -Name 'HardeningCore' If nothing is returned, you need to first load the module by using: Import-Module -Name 'HardeningCore' If you wish to load a specific version, use: Import-Module -Name 'HardeningCore' -RequiredVersion $version Where $version is set to the desired version number.","title":"Verification"},{"location":"user/licensing/","text":"Licensing \u00b6 Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Licensing"},{"location":"user/licensing/#licensing","text":"Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Licensing"},{"location":"user/project-architecture/","text":"Project Architecture \u00b6 This page contains details on the artifacts found in the repositories of this Organization. HardeningBuild \u00b6 HardeningCore \u00b6 HardeningDSC \u00b6 HardeningDoc \u00b6 HardeningPuppet \u00b6 HardeningUI \u00b6","title":"Project Architecture"},{"location":"user/project-architecture/#project-architecture","text":"This page contains details on the artifacts found in the repositories of this Organization.","title":"Project Architecture"},{"location":"user/project-architecture/#hardeningbuild","text":"","title":"HardeningBuild"},{"location":"user/project-architecture/#hardeningcore","text":"","title":"HardeningCore"},{"location":"user/project-architecture/#hardeningdsc","text":"","title":"HardeningDSC"},{"location":"user/project-architecture/#hardeningdoc","text":"","title":"HardeningDoc"},{"location":"user/project-architecture/#hardeningpuppet","text":"","title":"HardeningPuppet"},{"location":"user/project-architecture/#hardeningui","text":"","title":"HardeningUI"},{"location":"user/requirement/","text":"","title":"Requirement"},{"location":"user/style-guidelines/","text":"Style Guidelines \u00b6 In order to provide clean and consistent code, please follow the coding conventions listed below. General Rules \u00b6 For all indentation, use 4 spaces instead of tab stops Make sure all files are encoding using UTF-8. When writing Markdown, if a paragraph includes more than one sentence, end each sentence with a newline. GitHub will still render the sentences as a single paragraph, but the readability of git diff will be greatly improved. Files must end with a newline PowerShell Coding Style Guideline \u00b6 Code should not contain multiple blank lines in a row \u00b6 Bad: Function Get-MyValue { Write-Verbose 'Getting MyValue' return $MyValue } The above code breaks this rule by having two new lines between the write-verbose and the return. Good: Function Get-MyValue { Write-Verbose -Verbose 'Getting MyValue' return $MyValue } Opening curly brackets should not be followed by a blank line \u00b6 Bad: Function Get-MyValue { Write-Verbose 'Getting MyValue' return $MyValue } The code above breaks this rule by leaving a blank line after the opening curly brackets. Good: Function Get-MyValue { Write-Verbose -Verbose 'Getting MyValue' return $MyValue } Braces should always be on a following line \u00b6 Bad: if ( $connected ) { Write-Verbose 'Connected to server' } Good: if ( $connected ) { Write-Verbose -Verbose 'Connected to server' } Each line should have less than 100 characters \u00b6 Bad: $convertToCimUnjoinCredential = New-CimInstance -ClassName MSFT_Credential -Property @{ Username = [string] $UnjoinCredential . UserName ; Password = [string] $null } -Namespace root / microsoft / windows / desiredstateconfiguration -ClientOnly Good: $Params = @{ ClassName = 'MSFT_Credential' Property = @{ Username = [string] $UnjoinCredential . UserName Password = [string] $Null } Namespace = 'root/microsoft/windows/desiredstateconfiguration' ClientOnly = $True } $convertToCimUnjoinCredential = New-CimInstance @Params Use verbose, easy to understand names \u00b6 Bad: $rdsHost = Get-RdsHost Good: $remoteDesktopSessionHost = Get-RemoteDesktopSessionHost Function names should use PascalCase and follow Noun-Verb convention if possible \u00b6 Bad: function getTargetResource { # ... } Good: function Get-TargetResource { # ... } Parameter names should use PascalCase \u00b6 Bad: function Get-TargetResource { ... param ( ... $SOURCEPATH ... } Good: function Get-TargetResource { [ CmdletBinding ()] param ( ... $SourcePath ... } Variable names should use CamelCase \u00b6 Names of variables should use CamelCase Bad: function New-Log { $Message = \"New log message\" # should start with Low case Write-Host $Message } Good: function New-Log { $message = \"New log message\" Write-Host $message } Support comment-based help \u00b6 When commenting functions, use comment-based help syntax Bad: # Writes event function New-EtwEvent { param ( [ Parameter ( Mandatory = $True )] [ ValidateNotNullOrEmpty ()] [String] $message , [ ValidateSet ( \"operational\" , \"debug\" , \"analytic\" )] [String] $chanel = \"operational\" ) # Implementation } Good: function New-EtwEvent { <# .SYNOPSIS Writes event to ETW .PARAM message Message to write to ETW .PARAM chanel ETW channel where message should be stored .EXAMPLE New-EtwEvent -message \"Attempting to connect to server\" -chanel \"debug\" #> param ( [ Parameter ( Mandatory = $True )] [ ValidateNotNullOrEmpty ()] [String] $message , [ ValidateSet ( \"operational\" , \"debug\" , \"analytic\" )] [String] $chanel = \"operational\" ) # Implementation } Call cmdlets using all named parameters instead of positional parameters \u00b6 Bad: Get-Childitem c : \\ documents *. md The above code breaks this rule using by calling Get-ChildItem passing positional parameters instead of named parameters. Good: Get-ChildItem -Path c : \\ documents -filer *. md","title":"Style Guidelines"},{"location":"user/style-guidelines/#style-guidelines","text":"In order to provide clean and consistent code, please follow the coding conventions listed below.","title":"Style Guidelines"},{"location":"user/style-guidelines/#general-rules","text":"For all indentation, use 4 spaces instead of tab stops Make sure all files are encoding using UTF-8. When writing Markdown, if a paragraph includes more than one sentence, end each sentence with a newline. GitHub will still render the sentences as a single paragraph, but the readability of git diff will be greatly improved. Files must end with a newline","title":"General Rules"},{"location":"user/style-guidelines/#powershell-coding-style-guideline","text":"","title":"PowerShell Coding Style Guideline"},{"location":"user/style-guidelines/#code-should-not-contain-multiple-blank-lines-in-a-row","text":"Bad: Function Get-MyValue { Write-Verbose 'Getting MyValue' return $MyValue } The above code breaks this rule by having two new lines between the write-verbose and the return. Good: Function Get-MyValue { Write-Verbose -Verbose 'Getting MyValue' return $MyValue }","title":"Code should not contain multiple blank lines in a row"},{"location":"user/style-guidelines/#opening-curly-brackets-should-not-be-followed-by-a-blank-line","text":"Bad: Function Get-MyValue { Write-Verbose 'Getting MyValue' return $MyValue } The code above breaks this rule by leaving a blank line after the opening curly brackets. Good: Function Get-MyValue { Write-Verbose -Verbose 'Getting MyValue' return $MyValue }","title":"Opening curly brackets should not be followed by a blank line"},{"location":"user/style-guidelines/#braces-should-always-be-on-a-following-line","text":"Bad: if ( $connected ) { Write-Verbose 'Connected to server' } Good: if ( $connected ) { Write-Verbose -Verbose 'Connected to server' }","title":"Braces should always be on a following line"},{"location":"user/style-guidelines/#each-line-should-have-less-than-100-characters","text":"Bad: $convertToCimUnjoinCredential = New-CimInstance -ClassName MSFT_Credential -Property @{ Username = [string] $UnjoinCredential . UserName ; Password = [string] $null } -Namespace root / microsoft / windows / desiredstateconfiguration -ClientOnly Good: $Params = @{ ClassName = 'MSFT_Credential' Property = @{ Username = [string] $UnjoinCredential . UserName Password = [string] $Null } Namespace = 'root/microsoft/windows/desiredstateconfiguration' ClientOnly = $True } $convertToCimUnjoinCredential = New-CimInstance @Params","title":"Each line should have less than 100 characters"},{"location":"user/style-guidelines/#use-verbose-easy-to-understand-names","text":"Bad: $rdsHost = Get-RdsHost Good: $remoteDesktopSessionHost = Get-RemoteDesktopSessionHost","title":"Use verbose, easy to understand names"},{"location":"user/style-guidelines/#function-names-should-use-pascalcase-and-follow-noun-verb-convention-if-possible","text":"Bad: function getTargetResource { # ... } Good: function Get-TargetResource { # ... }","title":"Function names should use PascalCase and follow Noun-Verb convention if possible"},{"location":"user/style-guidelines/#parameter-names-should-use-pascalcase","text":"Bad: function Get-TargetResource { ... param ( ... $SOURCEPATH ... } Good: function Get-TargetResource { [ CmdletBinding ()] param ( ... $SourcePath ... }","title":"Parameter names should use PascalCase"},{"location":"user/style-guidelines/#variable-names-should-use-camelcase","text":"Names of variables should use CamelCase Bad: function New-Log { $Message = \"New log message\" # should start with Low case Write-Host $Message } Good: function New-Log { $message = \"New log message\" Write-Host $message }","title":"Variable names should use CamelCase"},{"location":"user/style-guidelines/#support-comment-based-help","text":"When commenting functions, use comment-based help syntax Bad: # Writes event function New-EtwEvent { param ( [ Parameter ( Mandatory = $True )] [ ValidateNotNullOrEmpty ()] [String] $message , [ ValidateSet ( \"operational\" , \"debug\" , \"analytic\" )] [String] $chanel = \"operational\" ) # Implementation } Good: function New-EtwEvent { <# .SYNOPSIS Writes event to ETW .PARAM message Message to write to ETW .PARAM chanel ETW channel where message should be stored .EXAMPLE New-EtwEvent -message \"Attempting to connect to server\" -chanel \"debug\" #> param ( [ Parameter ( Mandatory = $True )] [ ValidateNotNullOrEmpty ()] [String] $message , [ ValidateSet ( \"operational\" , \"debug\" , \"analytic\" )] [String] $chanel = \"operational\" ) # Implementation }","title":"Support comment-based help"},{"location":"user/style-guidelines/#call-cmdlets-using-all-named-parameters-instead-of-positional-parameters","text":"Bad: Get-Childitem c : \\ documents *. md The above code breaks this rule using by calling Get-ChildItem passing positional parameters instead of named parameters. Good: Get-ChildItem -Path c : \\ documents -filer *. md","title":"Call cmdlets using all named parameters instead of positional parameters"},{"location":"user/support/","text":"Support \u00b6 This community module is not officially supported and should be used at your own risk . A future release may include formal support. To report a bug, request an enhancement, or provide feedback about this project, please open an issue .","title":"Support"},{"location":"user/support/#support","text":"This community module is not officially supported and should be used at your own risk . A future release may include formal support. To report a bug, request an enhancement, or provide feedback about this project, please open an issue .","title":"Support"},{"location":"user/uninstall/","text":"Uninstall \u00b6 Option 1: Uninstall-Module (Recommended) \u00b6 If you installed the module via the PowerShell Gallery, please implement the following when you want to uninstall the module: Open a PowerShell console with the Run as Administrator option. Run Uninstall-Module -Name 'HardeningCore' . Option 2: Delete the HardeningCore module directory \u00b6 Delete the HardeningCore directory in your PowerShell Module path.","title":"Uninstall Guide"},{"location":"user/uninstall/#uninstall","text":"","title":"Uninstall"},{"location":"user/uninstall/#option-1-uninstall-module-recommended","text":"If you installed the module via the PowerShell Gallery, please implement the following when you want to uninstall the module: Open a PowerShell console with the Run as Administrator option. Run Uninstall-Module -Name 'HardeningCore' .","title":"Option 1: Uninstall-Module (Recommended)"},{"location":"user/uninstall/#option-2-delete-the-hardeningcore-module-directory","text":"Delete the HardeningCore directory in your PowerShell Module path.","title":"Option 2: Delete the HardeningCore module directory"},{"location":"user/update/","text":"Update \u00b6 Option 1: PowerShell Gallery Update (Recommended) \u00b6 If you installed the module via the PowerShell Gallery, please implement the following when you want to update to a newer version: Open a PowerShell console with the Run as Administrator option. Run Update-Module -Name 'HardeningCore' . Option 2: PowerShell Gallery Download \u00b6 If you deployed a saved module via the PowerShell Gallery, please implement the following when you want to update to a newer version: Open a PowerShell console with the Run as Administrator option. Run Save-Module -Name 'HardeningCore' -Path $path to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository. Copy the contents of the HardeningCore module folder into your workstation into the desired PowerShell Module path. Option 3: Manual Installation \u00b6 If you deployed the module via download from GitHub, please implement the following when you want to update to a newer version: Download the latest release version to your workstation. Copy the contents of the HardeningCore folder onto your workstation into the desired PowerShell Module path.","title":"Update Guide"},{"location":"user/update/#update","text":"","title":"Update"},{"location":"user/update/#option-1-powershell-gallery-update-recommended","text":"If you installed the module via the PowerShell Gallery, please implement the following when you want to update to a newer version: Open a PowerShell console with the Run as Administrator option. Run Update-Module -Name 'HardeningCore' .","title":"Option 1: PowerShell Gallery Update (Recommended)"},{"location":"user/update/#option-2-powershell-gallery-download","text":"If you deployed a saved module via the PowerShell Gallery, please implement the following when you want to update to a newer version: Open a PowerShell console with the Run as Administrator option. Run Save-Module -Name 'HardeningCore' -Path $path to download the module from the PowerShell Gallery. Note that the first time you install from the remote repository it may ask you to first trust the repository. Copy the contents of the HardeningCore module folder into your workstation into the desired PowerShell Module path.","title":"Option 2: PowerShell Gallery Download"},{"location":"user/update/#option-3-manual-installation","text":"If you deployed the module via download from GitHub, please implement the following when you want to update to a newer version: Download the latest release version to your workstation. Copy the contents of the HardeningCore folder onto your workstation into the desired PowerShell Module path.","title":"Option 3: Manual Installation"}]}